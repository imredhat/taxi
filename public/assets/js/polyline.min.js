"use strict";var polyline={};function py2_round(e){return Math.floor(Math.abs(e)+.5)*(0<=e?1:-1)}function encode(e,o,n){for(var r=2*((e=py2_round(e*n))-(o=py2_round(o*n))),t=(r<0&&(r=-r-1),"");32<=r;)t+=String.fromCharCode(63+(32|31&r)),r/=32;return t+=String.fromCharCode(63+(0|r))}function flipped(e){for(var o=[],n=0;n<e.length;n++){var r=e[n].slice();o.push([r[1],r[0]])}return o}polyline.decode=function(e,o){for(var n,r=0,t=0,i=0,l=[],u=0,p=0,d=null,c=Math.pow(10,Number.isInteger(o)?o:5);r<e.length;){for(d=null,u=1,p=0;p+=(31&(d=e.charCodeAt(r++)-63))*u,u*=32,32<=d;);for(n=1&p?(-p-1)/2:p/2,u=1,p=0;p+=(31&(d=e.charCodeAt(r++)-63))*u,u*=32,32<=d;);t+=n,i+=1&p?(-p-1)/2:p/2,l.push([t/c,i/c])}return l},polyline.encode=function(e,o){if(!e.length)return"";for(var n=Math.pow(10,Number.isInteger(o)?o:5),r=encode(e[0][0],0,n)+encode(e[0][1],0,n),t=1;t<e.length;t++)var i=e[t],l=e[t-1],r=(r+=encode(i[0],l[0],n))+encode(i[1],l[1],n);return r},polyline.fromGeoJSON=function(e,o){if((e=e&&"Feature"===e.type?e.geometry:e)&&"LineString"===e.type)return polyline.encode(flipped(e.coordinates),o);throw new Error("Input must be a GeoJSON LineString")},polyline.toGeoJSON=function(e,o){return{type:"LineString",coordinates:flipped(polyline.decode(e,o))}},"object"==typeof module&&module.exports&&(module.exports=polyline);